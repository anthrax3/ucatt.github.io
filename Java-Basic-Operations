
		<!DOCTYPE html>
		<html>
		<meta name="theme-color" content="#111">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
		<link rel="stylesheet" href="src/css/stat.css">
		<title>ucatt</title>
		<link rel="stylesheet" href="style.css">
		<body>
			<div class="main">
				<h1>Java Basic Operations</h1>Java provides a rich set of operators to manipulate variables.<br />
<br />
<b>Arithmetic Operators</b><br />
Arithmetic Operators are used to perform mathematical operations as they are used in algebra. The following are the operators..<br />
<div class="pad">+ Addition<br />
- Subtraction<br />
* Multiplication<br />
/ Division<br />
% Modulus<br />
++ Increment<br />
-- Decrement</div><br />
<b>Relation Operators</b><br />
The following are the relational operators supported by Java..<br />
<div class="pad">== equal to<br />
!= not equal to<br />
> greater than<br />
< less than<br />
>= greater than or equal to<br />
<= less than or equal to</div><br />
<b>Bitwise Operators</b><br />
Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char and byte.<br />
Bitwise operators works on bits and performs bit-by-bit operation. Assume if a=60 and b=13, the binary would be: a=00111100 , b=00001101<br />
<pre><br />
a&b=00001100<br />
b|b=00111101<br />
a^b=00110001<br />
~a=11000011<br />
</pre>Various operators are..<br />
<div class="pad">& (bitwise and)<br />
| (bitwise or)<br />
^ (bitwise xor)<br />
~ (bitwise compliment)<br />
<< (left shift)<div class="pad">The left operands value is moved left by the number of bits specified by the right operand.</div>>> (right shift)<div class="pad">The left operands value is moved right by the number of bits specified by the right operand.</div>>>> (zero fill right shift)<div class="pad">The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros.</div></div><br />
<b>Logical Operators</b><br />
The following are the logical operators in Java..<br />
<div class="pad">&& (logical and)<br />
|| (logical or)<br />
! (logical not)</div><br />
<b>Assignment Operators</b><br />
<div class="pad">= (simple assignment operator)<br />
+= (add and assignment operator)<br />
-+ (subtract and assignment operator)<br />
*=<br />
/=<br />
%=<br />
<<=<br />
>>=<br />
^=<br />
|=</div><br />
<b>Conditional Operator</b><br />
Conditional operator is also known as ternary operator. This operator consists of three operands and is used to evaluate Boolean expressions. The foal of the operator is to decide which value should be assigned to the variable.<br />
<code>variable x= (expression) ? value if true : value if false</code><br />
Example:<br />
<pre><br />
public class Test {<br />
   public static void main(String args[]) {<br />
      int a, b;<br />
      a = 10;<br />
      b = (a == 1) ? 20: 30;<br />
      System.out.println( "Value of b is : " +  b );<br />
<br />
      b = (a == 10) ? 20: 30;<br />
      System.out.println( "Value of b is : " + b );<br />
   }<br />
}<br />
</pre>The output is:<br />
<pre><br />
Value of b is : 30<br />
Value of b is : 20<br />
</pre><br />
<b>instanceof Operator</b><br />
The operator is used only with object reference variables. The operator check whether the object is of a particular type(class type or interface type).<br />
<code>(Object reference variable)instanceof(class/interface type)</code><br />
Example<br />
<pre><br />
public class Test {<br />
   public static void main(String args[]) {<br />
      String name = "James";<br />
      // following will return true since name is type of String<br />
      boolean result = name instanceof String;<br />
      System.out.println( result );<br />
   }<br />
}//this will produce op: true<br />
</pre><br />
<br />

			</div>
		</body>
		</html>