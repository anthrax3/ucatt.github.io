
		<!DOCTYPE html>
		<html>
		<meta name="theme-color" content="#111">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
		<link rel="stylesheet" href="src/css/stat.css">
		<title>ucatt</title>
		<link rel="stylesheet" href="style.css">
		<body>
			<div class="main">
				<h1>Java Files</h1>The java.io package contains nearly every class you might ever need to perform input and output (I/O) in Java.<br />
<br />
<b>Byte Stream</b><br />
Java byte streams are used to perform input and output of 8-bit bytes. Though there are many classes related to byte streams but the most frequently used classes are, FileInputStream and FileOutputStream.<br />
<pre><br />
import java.io.*;<br />
public class files1 {<br />
   public static void main(String args[]) throws IOException {  <br />
      FileInputStream in = null;<br />
      FileOutputStream out = null;<br />
      try {<br />
         in = new FileInputStream("input.txt");<br />
         out = new FileOutputStream("output.txt");<br />
         int c;<br />
         while ((c = in.read()) != -1) {<br />
            out.write(c);<br />
         }<br />
      }finally {<br />
         if (in != null) {<br />
            in.close();<br />
         }<br />
         if (out != null) {<br />
            out.close();<br />
         }<br />
      }<br />
   }<br />
}</pre><br />
<b>Character Streams</b><br />
Java Byte streams are used to perform input and output of 8-bit bytes, whereas Java Character streams are used to perform input and output for 16-bit unicode. Though there are many classes related to character streams but the most frequently used classes are, FileReader and FileWriter. Though internally FileReader uses FileInputStream and FileWriter uses FileOutputStream but here the major difference is that FileReader reads two bytes at a time and FileWriter writes two bytes at a time.<br />
<pre><br />
import java.io.*;<br />
public class CopyFile {<br />
<br />
   public static void main(String args[]) throws IOException {<br />
      FileReader in = null;<br />
      FileWriter out = null;<br />
<br />
      try {<br />
         in = new FileReader("input.txt");<br />
         out = new FileWriter("output.txt");<br />
         <br />
         int c;<br />
         while ((c = in.read()) != -1) {<br />
            out.write(c);<br />
         }<br />
      }finally {<br />
         if (in != null) {<br />
            in.close();<br />
         }<br />
         if (out != null) {<br />
            out.close();<br />
         }<br />
      }<br />
   }<br />
}</pre><br />
<h2>Standard Streams</h2>All the programming languages provide support for standard I/O where the user's program can take input from a keyboard and then produce an output on the computer screen.<br />
<br />
<b>Standard Input</b><br />
Used to feed the data to user's program and usually a keyboard is used as standard input stream and represented as <i>System.in</i>.<br />
<b>Standard Output</b><br />
This is used to output the data produced by the user's program and usually a computer screen is used for standard output stream and represented as <i>System.out</i>.<br />
<b>Standard Error</b><br />
This is used to output the error data produced by the user's program and usually a computer screen is used for standard error stream and represented as <i>System.err</i>.<br />
<h2>Getting user input</h2>There are many ways to do the same and the most simple ways are discussed below.<br />
<b>Using the Scanner Class</b><br />
<pre><br />
import java.util.Scanner;<br />
class UserInputScanner{<br />
    public static void main(String[] args){<br />
        int a,b,sum=0;<br />
        Scanner sc=new Scanner(System.in);<br />
        a=sc.nextInt();<br />
        b=sc.nextInt();<br />
        sum=a+b;<br />
        System.out.println("Sum="+sum);<br />
    }<br />
}<br />
</pre>The Scanner class is located in java.util collection and a new Scanner object is to be created with parameter as the standard input stream to get the user input using this class.<br />
<br />
<b>Using InputStreamReader</b><br />
<pre><br />
import java.io.*;<br />
public class ReadConsole {<br />
<br />
   public static void main(String args[]) throws IOException {<br />
      InputStreamReader cin = null;<br />
<br />
      try {<br />
         cin = new InputStreamReader(System.in);<br />
         System.out.println("Enter characters, 'q' to quit.");<br />
         char c;<br />
         do {<br />
            c = (char) cin.read();<br />
            System.out.print(c);<br />
         } while(c != 'q');<br />
      }finally {<br />
         if (cin != null) {<br />
            cin.close();<br />
         }<br />
      }<br />
   }<br />
}<br />
</pre>
			</div>
		</body>
		</html>